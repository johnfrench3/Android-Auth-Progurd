import java.text.SimpleDateFormat

apply plugin: ReleasePlugin

class Semver {
    String version
    def snapshot

    def getStringVersion() {
        return snapshot ?  "$version-SNAPSHOT" : version
    }

    def nextPatch() {
        def parts = version.split("\\.")
        def patch = Integer.parseInt(parts[2]) + 1
        return "${parts[0]}.${parts[1]}.${patch}"
    }

    def nextMinor() {
        def parts = version.split("\\.")
        def minor = Integer.parseInt(parts[1]) + 1
        return "${parts[0]}.${minor}.0"
    }

}

class ChangeLogTask extends DefaultTask {

    def current
    def next

    @TaskAction
    def update() {
        def repository = project.auth0Release.library
        def file = new File('CHANGELOG.md')
        def output = new File('CHANGELOG.md.release')
        output.newWriter().withWriter { writer ->

            file.eachLine { line, number ->
                if (number == 0 && !line.startsWith('# Change Log')) {
                    throw new GradleException('Change Log file is not properly formatted')
                }

                writer.println(line)

                if (number == 0 || number > 1) {
                    return
                }

                def formatter = new SimpleDateFormat('yyyy-MM-dd')
                writer.println()
                writer.println("## [${next}](https://github.com/auth0/${repository}/tree/${next}) (${formatter.format(new Date())})")
                writer.println("[Full Changelog](https://github.com/auth0/${repository}/compare/${current}...${next})")
                def command = ["curl", "https://webtask.it.auth0.com/api/run/wt-hernan-auth0_com-0/oss-changelog.js?webtask_no_cache=1&repo=${repository}&milestone=${next}", "-f", "-s", "-H", "Accept: text/markdown"]
                def content = command.execute()
                content.consumeProcessOutputStream(writer)
                if (content.waitFor() != 0) {
                    throw new GradleException("Failed to request changelog for version ${next}")
                }
            }
        }
        file.delete()
        output.renameTo('CHANGELOG.md')
    }
}

class ReleaseTask extends DefaultTask {

    def tagName

    @TaskAction
    def perform() {
        def path = project.getRootProject().getProjectDir().path
        project.exec {
            commandLine 'git', 'add', 'README.md'
            workingDir path
        }
        project.exec {
            commandLine 'git', 'add', 'CHANGELOG.md'
            workingDir path
        }
        project.exec {
            commandLine 'git', 'commit', '-m', "Release ${tagName}"
            workingDir path
        }
        project.exec {
            commandLine 'git', 'tag', "${tagName}"
            workingDir path
        }
    }
}

class ReadmeTask extends DefaultTask {

    def current
    def next

    final filename = 'README.md'

    @TaskAction
    def update() {
        def file = new File(filename)
        def updated = "compile '${project.group}:${project.name}:${next}'"
        def oldSingleQuote = "compile '${project.group}:${project.name}:${current}'"
        def oldDoubleQuote = "compile \"${project.group}:${project.name}:${current}\""
        def contents = file.getText('UTF-8')
        contents = contents.replace(oldSingleQuote, updated).replace(oldDoubleQuote, updated)
        file.write(contents, 'UTF-8')
    }
}

class Auth0ReleasePluginExtension {
    String library
}

class ReleasePlugin implements Plugin<Project> {
    void apply(Project target) {
        def semver = current()
        target.extensions.create('auth0Release', Auth0ReleasePluginExtension)
        target.version = semver.stringVersion
        def version = semver.version
        def nextMinor = semver.nextMinor()
        def nextPatch = semver.nextPatch()
        target.task('changelogMinor', type: ChangeLogTask) {
            current = version
            next = nextMinor
        }
        target.task('changelogPatch', type: ChangeLogTask) {
            current = version
            next = nextPatch
        }
        target.task('readmeMinor', type: ReadmeTask, dependsOn: 'changelogMinor') {
            current = version
            next = nextMinor
        }
        target.task('readmePatch', type: ReadmeTask, dependsOn: 'changelogPatch') {
            current = version
            next = nextPatch
        }
        target.task('releaseMinor', type: ReleaseTask, dependsOn: 'readmeMinor') {
            tagName = nextMinor
        }
        target.task('releasePatch', type: ReleaseTask, dependsOn: 'readmePatch') {
            tagName = nextPatch
        }
    }

    static def current() {
        def current = describeGit(false)
        def snapshot = current == null
        if (snapshot) {
            current = describeGit(snapshot, '0.0.1')
        }
        return new Semver(snapshot: snapshot, version: current)
    }

    static def describeGit(boolean snapshot, String defaultValue = null) {
        def command = ['git', 'describe', '--tags', (snapshot ? '--abbrev=0' : '--exact-match')].execute()
        def stdout = new ByteArrayOutputStream()
        def errout = new ByteArrayOutputStream()
        command.consumeProcessOutput(stdout, errout)
        if (command.waitFor() != 0) {
            Logging.getLogger(ReleasePlugin.class).debug(errout.toString())
            return defaultValue
        }
        if (stdout.toByteArray().length > 0) {
            return stdout.toString().replace('\n', "")
        }

        return defaultValue
    }
}
/*
 * build.gradle
 *
 * Copyright (c) 2016 Auth0 (http://auth0.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import java.text.SimpleDateFormat

apply plugin: 'com.android.library'
apply from: '../scripts/jacoco.gradle'
apply plugin: ReleasePlugin

logger.lifecycle("Using version ${version} for ${name}")

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.1'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName semver.stringVersion
        buildConfigField "String", "LIBRARY_NAME", "\"Auth0.Android\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        warning 'InvalidPackage'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.auth0.android:jwtdecode:1.0.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'com.squareup.okhttp:mockwebserver:2.7.5'
    testCompile 'com.jayway.awaitility:awaitility:1.6.4'
    testCompile 'org.robolectric:robolectric:3.1.2'
    testCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
}

class Semver {
    String version
    def snapshot

    def getStringVersion() {
        return snapshot ? version + "-SNAPSHOT" : version
    }

    def nextPatch() {
        def parts = version.split("\\.")
        def patch = Integer.parseInt(parts[2]) + 1
        return "${parts[0]}.${parts[1]}.${patch}"
    }

    def nextMinor() {
        def parts = version.split("\\.")
        def minor = Integer.parseInt(parts[1]) + 1
        return "${parts[0]}.${minor}.0"
    }

}

class ChangeLogTask extends DefaultTask {

    def repo
    def current
    def next

    @TaskAction
    def changelog() {
        def file = new File('CHANGELOG.md')
        def output = new File('CHANGELOG.md.release')
        output.newWriter().withWriter { writer ->

            file.eachLine { line, number ->
                if (number == 0 && !line.startsWith("# Change Log")) {
                    throw new StopExecutionException("Change Log file is not properly formatted")
                }

                writer.println(line)

                if (number == 0 || number > 1) {
                    return
                }

                def formatter = new SimpleDateFormat("yyyy-MM-dd")
                writer.println()
                writer.println("## [${next}](https://github.com/auth0/${repo}/tree/${next}) (${formatter.format(new Date())})")
                writer.println("[Full Changelog](https://github.com/auth0/${repo}/compare/${current}...${next})")
                def command = ["curl", "https://webtask.it.auth0.com/api/run/wt-hernan-auth0_com-0/oss-changelog.js?webtask_no_cache=1&repo=${repo}&milestone=${next}", "-f", "-s", "-H", "Accept: text/markdown"]
                def content = command.execute()
                content.consumeProcessOutputStream(writer)
                if (content.waitFor() != 0) {
                    throw new StopExecutionException("Failed to request changelog for version ${next}")
                }
            }
        }
        file.delete()
        output.renameTo('CHANGELOG.md')
    }
}

task changelogMinor(type: ChangeLogTask) {
    repo = "Auth0.Android"
    current = project.ext.semver.version
    next = project.ext.semver.nextMinor()
}

task changelogPatch(type: ChangeLogTask) {
    repo = "Auth0.Android"
    current = project.ext.semver.version
    next = project.ext.semver.nextPatch()
}

apply from: '../scripts/maven.gradle'
apply from: '../scripts/bintray.gradle'

class ReleasePlugin implements Plugin<Project> {
    void apply(Project target) {
        def semver = current()
        target.version = semver.stringVersion
        target.ext.semver = semver
    }

    def current() {
        def current = describeGit(false)
        def snapshot = current == null
        if (snapshot) {
            current = describeGit(snapshot, "0.0.1")
        }
        return new Semver(snapshot: snapshot, version: current)
    }

    def describeGit(boolean snapshot, String defaultValue = null) {
        def command = ['git', 'describe', '--tags', (snapshot ? '--abbrev=0' : '--exact-match')].execute()
        def stdout = new ByteArrayOutputStream()
        def errout = new ByteArrayOutputStream()
        command.consumeProcessOutput(stdout, errout)
        if (command.waitFor() != 0) {
            Logging.getLogger(ReleasePlugin.class).debug(errout.toString())
            return defaultValue
        }
        if (stdout.toByteArray().length > 0) {
            return stdout.toString().replace("\n", "")
        }

        return defaultValue
    }
}